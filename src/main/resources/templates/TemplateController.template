package com.xxbb.springbootapi.controller;

import com.xxbb.springbootapi.entity.{entityName};
import com.xxbb.springbootapi.entity.dto.PagedInputT;
import com.xxbb.springbootapi.entity.dto.PagedResult;
import com.xxbb.springbootapi.mapper.{entityName}Mapper;
import com.xxbb.springbootapi.service.impl.{entityName}Service;
import com.xxbb.springbootapi.wrapper.{entityName}Query;
import com.xxbb.springbootapi.wrapper.{entityName}Update;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import java.util.List;

@RequestMapping("{entityNameLowCase}")
@Api(tags = "{entityName}表")
@RestController
public class {entityName}Controller extends AuthApiController<{entityName}, {entityName}Query, {entityName}Update, {entityName}Mapper> {
    @Autowired
    private {entityName}Service service;

    /**
     * Create boolean.
     *
     * @param entity the entity
     * @return the boolean
     */
    @Override
    @PostMapping
    @PreAuthorize("@auth.hasAuth('sys:{entityNameLowCase}:add')")
    @ApiOperation(value = "添加", notes = "id，创建时间，修改时间无需提交")
    public Boolean create(@RequestBody {entityName} entity) {
        return service.add(entity);
    }

    /**
     * Delete boolean.
     *
     * @param id the id
     * @return the boolean
     */
    @Override
    @DeleteMapping("/{id}")
    @PreAuthorize("@auth.hasAuth('sys:{entityNameLowCase}:delete')")
    @ApiOperation(value = "删除")
    public Boolean delete(@PathVariable("id") int id) {
        return service.delete(id);
    }

    /**
     * 批量删除
     *
     * @param ids
     * @return
     */
    @Override
    @PostMapping("/delete")
    @PreAuthorize("@auth.hasAuth('sys:{entityNameLowCase}:delete')")
    @ApiOperation(value = "批量删除")
    public Boolean delete(@RequestBody List<Integer> ids) {
        return service.delete(ids);
    }

    /**
     * Update boolean.
     *
     * @param entity the entity
     * @return the boolean
     */
    @Override
    @PutMapping
    @PreAuthorize("@auth.hasAuth('sys:{entityNameLowCase}:update')")
    @ApiOperation(value = "修改", notes = "创建时间，修改时间无需提交")
    public Boolean update(@RequestBody {entityName} entity) {
        return service.update(entity);
    }

    /**
     * Find k.
     *
     * @param id the id
     * @return the k
     */
    @Override
    @GetMapping("/{id}")
    @PreAuthorize("@auth.hasAuth('sys:{entityNameLowCase}:select')")
    @ApiOperation(value = "查询一条")
    public {entityName} find(@PathVariable("id") int id) {
        return ({entityName}) service.find(id);
    }

    /**
     * Search paged result.
     *
     * @param pagedInput the paged input
     * @return the paged result
     */
    @Override
    @PostMapping("/paged")
    @ApiOperation(value = "分页查询")
    @PreAuthorize("@auth.hasAuth('sys:{entityNameLowCase}:select')")
    public PagedResult<{entityName}> paged(@RequestBody PagedInputT<{entityName}> pagedInput) {
        return service.paged(pagedInput);
    }
}
