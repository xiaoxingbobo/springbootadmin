<script setup lang="ts">
import { ContentWrap } from '@/components/ContentWrap'
import { ref, reactive } from 'vue'
import { Table } from '@/components/Table'
import { add{entityName}, put{entityName}, get{entityName}, get{entityName}List, batchDelete{entityName} } from '@/api/{entityNameLowCase}'
import { Dialog } from '@/components/Dialog'
import Write from './components/Write.vue'
import { ElButton, ElMessage } from 'element-plus'
import { Search } from '@/components/Search'
import { {entityName} } from '@/api/{entityNameLowCase}/types'
import { useCrudSchemas } from '@/hooks/web/useCrudSchemas'
import { useI18n } from '@/hooks/web/useI18n'
import { useTable } from '@/hooks/web/useTable'
import { unref } from 'vue'

const dialog = ref({
  visiable: false,
  title: '添加'
})

const { t } = useI18n()

const { register, tableObject, methods } = useTable<{entityName}>({
  getListApi: get{entityName}List,
  delListApi: batchDelete{entityName},
  response: {
    list: 'data',
    total: 'total'
  }
})

const { delList, getSelections, setSearchParams } = methods

const columns = reactive<TableColumn[]>([
  {
    field: 'index',
    label: '序号',
    type: 'index',
    form: {
      show: false
    }
  },{tableFields}
  {
    field: 'createTime',
    label: '创建时间',
    form: {
      show: false
    }
  },
  {
    field: 'action',
    width: '160px',
    label: '操作',
    form: {
      show: false
    }
  }
])

const { allSchemas } = useCrudSchemas(columns)

const data = ref<{entityName}>()

const loading = ref(false)

/**
 * 删除
 * @param row
 * @param multiple
 */
const delData = async (row: {entityName} | null, multiple: boolean) => {
  tableObject.currentRow = row
  const selections = await getSelections()
  loading.value = true
  await delList(
    multiple ? selections.map((v) => v.id) : [tableObject.currentRow?.id as number],
    multiple
  ).finally(() => {
    loading.value = false
  })
}

/**
 * 添加或修改数据
 * @param row
 */
const editData = async (row?: {entityName}) => {
  dialog.value.visiable = true
  //修改
  if (row) {
    tableObject.currentRow = row as {entityName}
    dialog.value.title = '修改'
    const { data: res } = await get{entityName}(row.id?.toString())
    data.value = res
  } else {
    tableObject.currentRow = null
    dialog.value = {
      visiable: true,
      title: t('exampleDemo.add')
    }
  }
}

const writeRef = ref<ComponentRef<typeof Write>>()

/**
 * 保存数据
 */
const saveData = async () => {
  const write = unref(writeRef)
  await write?.elFormRef?.validate(async (isValid) => {
    if (isValid) {
      loading.value = true
      const data = (await write?.getFormData()) as {entityName}
      if (data.id) {
        await put{entityName}(data)
        ElMessage.success(t('common.success'))
      } else {
        await add{entityName}(data)
        ElMessage.success(t('common.success'))
      }
      loading.value = false
      dialog.value.visiable = false
    }
    methods.getList()
  })
}

/**
 * 请求数据
 */
methods.getList()
</script>

<template>
  <ContentWrap>
    <Search :schema="allSchemas.searchSchema" @search="setSearchParams" />
    <div class="mb-10px">
      <ElButton type="success" v-hasPermission="['sys:{entityName}:add']" @click="editData()">
        <Icon icon="material-symbols:add" />{{ t('exampleDemo.add') }}
      </ElButton>
      <ElButton type="danger" v-hasPermission="['sys:{entityName}:delete']" @click="delData(null, true)">
        <Icon icon="fluent:delete-28-regular" />{{ t('exampleDemo.del') }}
      </ElButton>
    </div>
    <Table
      :columns="columns"
      :data="tableObject.tableList"
      :page-sizes="[10, 20, 50, 100]"
      v-model:pageSize="tableObject.size"
      v-model:currentPage="tableObject.current"
      :row-key="(row) => row.id"
      :selection="true"
      :border="true"
      :loading="loading"
      :stripe="true"
      :pagination="{
        background: true,
        total: tableObject.total
      }"
      @register="register"
    >
      <template #action="{ row }">
        <ElButton
          type="danger"
          plain
          v-hasPermission="['sys:{entityName}:delete']"
          @click="delData(row, false)"
        >
          {{ t('exampleDemo.del') }}
        </ElButton>
        <ElButton type="primary" v-hasPermission="['sys:{entityName}:update']" @click="editData(row)">
          {{ t('exampleDemo.edit') }}
        </ElButton>
      </template>
    </Table>
  </ContentWrap>
  <!-- 弹窗 -->
  <Dialog
    v-model="dialog.visiable"
    :title="dialog.title"
    maxHeight="60%"
    @closed="dialog.visiable = false"
    style="width: 40%; min-width: 375px; max-width: 600px"
  >
    <Write
      ref="writeRef"
      :form-schema="allSchemas.formSchema"
      :current-row="tableObject.currentRow"
    />
    <template #footer>
      <ElButton type="primary" style="margin-left: 38%" @click="saveData()">
        {{ t('dialogDemo.submit') }}
      </ElButton>
      <el-button @click="dialog.visiable = false">{{ t('dialogDemo.close') }}</el-button>
    </template>
  </Dialog>
</template>
<style scoped></style>
