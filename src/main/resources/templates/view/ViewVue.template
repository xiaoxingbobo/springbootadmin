<script setup lang="ts">
import { ContentWrap } from '@/components/ContentWrap'
import { ref, reactive } from 'vue'
import { Table } from '@/components/Table'
import {
  pagedQuery{entityName},
  add{entityName},
  delete{entityName},
  put{entityName},
  get{entityName},
  getRole,
  pagedSearch{entityName}
} from '@/api/{entityNameLowCase}'
import { Dialog } from '@/components/Dialog'
import {
  ElButton,
  ElForm,
  ElFormItem,
  ElInput,
  ElSelect,
  ElOption,
  ElRadioGroup,
  ElRadio,
  ElMessage,
  ElMessageBox,
  ElPagination
} from 'element-plus'
import type { FormInstance } from 'element-plus'
import { setNull, setValue } from '@/utils/index'

/**
 * 声明data
 */
const dialogVisible = ref(false)
//  {entityNameLowCase}列表数据
let tabledata: any = ref('')
// 弹窗标题
const dialogTitle: any = ref('添加用户')
// 点击编辑，id存放
const editactionid: any = ref('')
// 表单的实例
const diaLogForm = ref<FormInstance>()
//  全部角色信息数据
let roleList: any = ref({})
// 表头
const columns = reactive<TableColumn[]>([
  {
    field: 'index',
    label: '序号',
    type: 'index'
  },
  {
    field: '{entityNameLowCase}name',
    label: '用户名'
  },
  {
    field: 'name',
    label: 'name'
  },
  {
    field: 'nickname',
    label: '昵称'
  },
  {
    field: 'age',
    label: '年龄'
  },
  {
    field: 'sex',
    label: '性别'
  },
  {
    field: 'createTime',
    label: '创建时间'
  },
  {
    field: 'action',
    width: '160px',
    label: '操作',
    form: {
      show: false
    },
    detail: {
      show: false
    }
  }
])

// 添加的实体
const {entityNameLowCase}Payload: any = reactive({
  age: 18,
  email: '',
  id: 0,
  name: '',
  nickname: '',
  password: '',
  roleId: null,
  sex: 0,
  {entityNameLowCase}name: ''
})
// 表格分页
let total: any = ref(0)
// 分页数据
let pagedPlayload: {
  current: number
  size: number
} = {
  // 当前页
  current: 1,
  // 每页条数
  size: 10
}
// 搜索字段
let searchFileds = reactive({
  {entityNameLowCase}name: null,
  name: null,
  nickname: null,
  age: null
})
const searchPlayload: any = {
  condition: [],
  pagedPlayload
}

// 初始化函数
const initData = async () => {
  setNull(searchFileds)
  searchPlayload.condition = []
  const { data: res } = await pagedQuery{entityName}(pagedPlayload)
  let newreslist = res.data
  newreslist.forEach((e) => {
    if (e.sex === 0) {
      e.sex = '男'
    } else {
      e.sex = '女'
    }
  })
  tabledata.value = newreslist
  total.value = res.total
}
initData()
/**
 * 切换页大小
 * @param val
 */
const handleSizeChange = () => {
  searchPlayload.size = pagedPlayload.size
  if (searchPlayload.condition.length > 0) {
    pagedSearches(searchPlayload)
  } else {
    initData() // 跟新列表
  }
}

/**
 * 添加
 */
const tianjiajiekoubtn = () => {
  dialogTitle.value = '添加'
  dialogVisible.value = true
}

/**
 * 编辑用户按钮
 * @param row
 */
const editaction = async (row) => {
  dialogTitle.value = '编辑'
  editactionid.value = row.id
  dialogVisible.value = true
  const { data: res } = await get{entityName}(row.id)
  const role = await getRole()
  roleList.value = role.data
  setValue({entityNameLowCase}Payload, res)
}

/**
 * 删除
 * @param row
 */
const deleteaction = async (row) => {
  try {
    const res: any = await ElMessageBox.confirm('确定要删除此用户吗？该操作将不可恢复！', '提示', {
      confirmButtonText: '确定',
      cancelButtonText: '取消',
      type: 'warning'
    })
    // 点击了确定
    if (res === 'confirm') {
      const res: any = await delete{entityName}(row.id)
      ElMessage({
        message: res.message,
        type: 'success'
      })
    }
  } catch (error: any) {}
  initData() // 跟新列表
}

/**
 * 关闭弹窗
 * @param formEl
 */
const close = (formEl: FormInstance | undefined = undefined) => {
  dialogVisible.value = false
  setNull({entityNameLowCase}Payload)
  // 重置表单
  if (!formEl) return
  formEl.resetFields()
}
/**
 * 保存
 * @param formEl
 */
const save = (formEl: FormInstance | undefined) => {
  if (!formEl) return
  formEl.validate(async (valid) => {
    if (valid) {
      // 表单验证通过
      if (dialogTitle.value === '添加') {
        try {
          await add{entityName}({entityNameLowCase}Payload)
          ElMessage({
            message: '添加用户成功!',
            type: 'success'
          })
        } catch (error: any) {
          ElMessage.error(error)
        }
      } else {
        // 编辑
        try {
          {entityNameLowCase}Payload.id = editactionid.value
          await put{entityName}({entityNameLowCase}Payload)
          ElMessage({
            message: '操作成功!',
            type: 'success'
          })
        } catch (error) {}
      }
      // 关闭弹窗  刷新列表
      close()
      initData() // 刷新列表
    } else {
      return false
    }
  })
}

/**
 * 分页搜索
 * @param data
 */
const pagedSearches = async (data) => {
  const resseach = await pagedSearch{entityName}(data)
  if (resseach.data.length !== 0) {
    // 查询到数据
    let newreslist2 = resseach.data.data
    newreslist2.forEach((e) => {
      if (e.sex === 0) {
        e.sex = '男'
      } else {
        e.sex = '女'
      }
    })
    tabledata.value = newreslist2
    total.value = resseach.data.total
  }
}
/**
 * 切换页码
 * @param val
 */
const handleCurrentChange = () => {
  if (searchPlayload.condition.length > 0) {
    searchPlayload.current = pagedPlayload.current
    pagedSearches(searchPlayload)
  } else {
    initData() // 跟新列表
  }
}

/**
 * 分页查询
 */
const clickQuery = async () => {
  for (let key in searchFileds) {
    if (searchFileds[key] != null) {
      searchPlayload.condition.push({
        field: key,
        keyword: searchFileds[key]
      })
    }
  }
  if (searchPlayload.condition.length === 0) {
    initData() // 刷新列表
    return
  }
  pagedSearches(searchPlayload)
  ElMessage({
    message: '请求成功！',
    type: 'success'
  })
}
</script>

<template>
  <ContentWrap>
    <div class="mb-10px">
      <ElButton type="success" v-hasPermission="['sys:{entityNameLowCase}:add']" @click="tianjiajiekoubtn">
        <Icon icon="material-symbols:add" />添加</ElButton
      >
      <ElButton v-hasPermission="['sys:{entityNameLowCase}:delete']" type="danger">
        <Icon icon="fluent:delete-28-regular" />删除
      </ElButton>
    </div>
    <div class="mb-10px">
      <el-form :inline="true" label-width="55px">
        <el-form-item label="用户名">
          <el-input style="width: 230px" v-model="searchFileds.{entityNameLowCase}name" placeholder="{entityNameLowCase}name" />
        </el-form-item>
        <el-form-item label="name">
          <el-input style="width: 230px" v-model="searchFileds.name" placeholder="name" />
        </el-form-item>
        <el-form-item label="年龄">
          <el-input style="width: 230px" v-model="searchFileds.age" placeholder="age" />
        </el-form-item>
        <el-form-item>
          <ElButton type="primary" v-hasPermission="['sys:{entityNameLowCase}:select']" @click="clickQuery">
            <Icon icon="bi:search" /> 查询
          </ElButton>
          <ElButton type="primary" @click="initData"> <Icon icon="bx:reset" /> 重置 </ElButton>
        </el-form-item>
      </el-form>
    </div>
    <Table :columns="columns" :data="tabledata">
      <template #action="{ row }">
        <ElButton type="danger" v-hasPermission="['sys:{entityNameLowCase}:delete']" @click="deleteaction(row)">
          删除
        </ElButton>
        <ElButton type="primary" v-hasPermission="['sys:{entityNameLowCase}:update']" @click="editaction(row)">
          编辑
        </ElButton>
      </template>
    </Table>
    <el-pagination
      v-model:currentPage="pagedPlayload.current"
      v-model:page-size="pagedPlayload.size"
      :page-sizes="[10, 20, 50, 100]"
      style="margin-top: 20px"
      layout="total, sizes, prev, pager, next, jumper"
      :total="total"
      @size-change="handleSizeChange"
      @current-change="handleCurrentChange"
    />
  </ContentWrap>
  <!-- 弹窗 -->
  <Dialog
    v-model="dialogVisible"
    :title="dialogTitle"
    maxHeight="60%"
    @closed="close"
    style="width: 40%; min-width: 375px; max-width: 600px"
  >
    <!-- 表单 -->
    <el-form ref="diaLogForm" :model="{entityNameLowCase}Payload" label-width="65px">
      <el-form-item
        label="用户名"
        prop="{entityNameLowCase}name"
        :rules="[{ required: true, message: '用户名不能为空！' }]"
      >
        <el-input v-model="{entityNameLowCase}Payload.{entityNameLowCase}name" autocomplete="off" />
      </el-form-item>
      <el-form-item label="密码" prop="password">
        <el-input v-model="{entityNameLowCase}Payload.password" autocomplete="off" />
      </el-form-item>
      <el-form-item
        label="角色"
        prop="roleId"
        :rules="[{ required: true, message: '请选择角色！' }]"
      >
        <el-select v-model="{entityNameLowCase}Payload.roleId" placeholder="请选择角色">
          <el-option v-for="item in roleList" :key="item.id" :label="item.name" :value="item.id">
            <span style="float: left">{{ item.name }}</span>
          </el-option>
        </el-select>
      </el-form-item>
      <el-form-item label="昵称" prop="nickname">
        <el-input v-model="{entityNameLowCase}Payload.nickname" autocomplete="off" />
      </el-form-item>
      <el-form-item label="年龄" prop="age">
        <el-input v-model="{entityNameLowCase}Payload.age" autocomplete="off" />
      </el-form-item>
      <el-form-item label="email" prop="email">
        <el-input v-model="{entityNameLowCase}Payload.email" autocomplete="off" />
      </el-form-item>
      <el-form-item label="性别" prop="sex" :rules="[{ required: true, message: '请选择性别！' }]">
        <el-radio-group v-model="{entityNameLowCase}Payload.sex">
          <el-radio :label="0">男</el-radio>
          <el-radio :label="1">女</el-radio>
        </el-radio-group>
      </el-form-item>
    </el-form>
    <template #footer>
      <ElButton type="primary" style="margin-left: 38%" @click="save(diaLogForm)"> 确定 </ElButton>
      <el-button @click="close(diaLogForm)">关闭</el-button>
    </template>
  </Dialog>
</template>
<style scoped></style>
